{"version":3,"file":"index.min.js","sources":["../src/base.ts","../src/challenge.ts","../src/client.ts","../src/bridge/CookieUniversal.ts","../src/refreshToken.ts","../src/state.ts","../src/bridge/StorageLocalForage.ts","../src/token.ts"],"sourcesContent":["import {\n  CookieGetOptions,\n  CookieSetOptions, Data,\n  StorageInterface,\n  TokenConfig,\n} from './interfaces';\n\nexport default abstract class Base {\n  protected defaultConfig: TokenConfig = {\n    prefix: 'oauth_',\n  };\n\n  public config: TokenConfig;\n\n  protected constructor(\n    protected storage: StorageInterface,\n    // eslint-disable-next-line no-empty-function\n  ) {\n\n  }\n\n  public get(options?: CookieGetOptions): Promise<any> {\n    return this.storage.get(this.getName(), options);\n  }\n\n  public remove(options?: CookieSetOptions): void {\n    this.storage.remove(this.getName(), options);\n  }\n\n  public set(value: Data, options?: CookieSetOptions): void {\n    this.storage.set(this.getName(), value, options);\n  }\n\n  public setConfig(defaultConfig: TokenConfig, config?: TokenConfig) {\n    if (config) {\n      this.config = { ...defaultConfig, ...config };\n      return;\n    }\n    this.config = { ...defaultConfig };\n  }\n\n  public getName(): string {\n    const { prefix, name } = this.config;\n\n    if (!prefix) {\n      return name;\n    }\n\n    return `${prefix}${name}`;\n  }\n}\n","import Base from './base';\nimport {\n  BaseInterface,\n  StorageInterface, TokenConfig,\n} from './interfaces';\n\nexport default class Challenge extends Base implements BaseInterface {\n  public defaultConfig: TokenConfig = {\n    prefix: 'oauth_',\n    name: 'challenge',\n  };\n\n  constructor(protected storage: StorageInterface, config?: TokenConfig) {\n    super(storage);\n\n    this.setConfig(this.defaultConfig, config);\n  }\n}\n","import forge from 'node-forge';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport Challenge from './challenge';\nimport {\n  DataInterface,\n  OAuthConfigInterface,\n} from './interfaces';\nimport State from './state';\n\nexport default class Client {\n  constructor(private config: OAuthConfigInterface,\n              private challenge: Challenge,\n              private state: State) { // eslint-disable-next-line no-empty-function\n  }\n\n  public getConfig(key?: string): string | OAuthConfigInterface {\n    if (key) {\n      return this.config[key];\n    }\n\n    return this.config;\n  }\n\n  public authorize(scope: string): void {\n    if (!window) {\n      throw new Error('Oauth service can only be run client side.');\n    }\n\n    const challenge = this.getChallenge();\n    const state = uuidv4().replaceAll('-', '');\n    this.state.set(state);\n\n    const { client_id, authenticateUri } = this.config;\n\n    const params = {\n      state,\n      client_id,\n      scope,\n      redirect_uri: this.getRedirectUri(),\n      response_type: 'code',\n      code_challenge: challenge,\n      code_challenge_method: 'S256',\n    };\n\n    const searchParams = new URLSearchParams(params as any);\n\n    window.location.href = `${authenticateUri as string}?${searchParams.toString()}`;\n  }\n\n  private getChallenge(): string {\n    let challenge = `${(uuidv4() as string)}${(uuidv4() as string)}${(uuidv4() as string)}`;\n    challenge = challenge.replaceAll('-', '');\n\n    const md = forge.md.sha256.create();\n    md.update(challenge);\n    // noinspection UnnecessaryLocalVariableJS\n    const code = forge.util.encode64(md.digest().data);\n\n    const hash = code.replaceAll('+', '-')\n      .replaceAll('/', '_')\n      .replace(/=$/, '');\n\n    this.challenge.set(challenge);\n\n    return hash;\n  }\n\n  public async getRequestTokenData(state: string, code: string): Promise<DataInterface> {\n    const localState = await this.state.get();\n    const challenge = await this.challenge.get();\n\n    if (localState !== state) {\n      throw new Error('State do not match');\n    }\n\n    const { client_id, tokenUri } = this.config;\n\n    return {\n      uri: tokenUri,\n      data: {\n        code,\n        client_id,\n        code_verifier: challenge,\n        redirect_uri: this.getRedirectUri(),\n        grant_type: 'authorization_code',\n      },\n    };\n  }\n\n  public getRefreshTokenData(scope: string, token: string) {\n    const { client_id, tokenUri } = this.config;\n    return {\n      uri: tokenUri,\n      data: {\n        client_id,\n        scope,\n        refresh_token: token,\n        grant_type: 'refresh_token',\n      },\n    };\n  }\n\n  private getRedirectUri() {\n    const { redirectUri } = this.config;\n    const { location: { protocol, hostname, port } } = window;\n    let rUri = `${protocol}://${hostname}${redirectUri}`;\n    if ((protocol === 'https:' && port !== '443') || (protocol === 'http:' && port !== '80')) {\n      rUri = `${protocol}//${hostname}:${port}${redirectUri}`;\n    }\n\n    return rUri;\n  }\n}\n","import Cookies from 'universal-cookie';\n\nimport {\n  CookieGetOptions,\n  CookieSetOptions,\n  Data,\n  StorageInterface,\n} from '../interfaces';\n\nexport default class CookieUniversal implements StorageInterface {\n  // eslint-disable-next-line no-empty-function\n  constructor(private instance: Cookies) {\n  }\n\n  public set(name: string, value: Data, options?: CookieSetOptions): void {\n    this.instance.set(name, value, { path: '/', ...options });\n  }\n\n  public async get(name: string, options?: CookieGetOptions): Promise<string> {\n    return Promise.resolve(this.instance.get(name, options));\n  }\n\n  public async remove(name: string, options?: CookieSetOptions): Promise<void> {\n    await this.instance.remove(name, { path: '/', ...options });\n  }\n}\n","import Base from './base';\nimport {\n  BaseInterface,\n  StorageInterface, TokenConfig,\n} from './interfaces';\n\nexport default class RefreshToken extends Base implements BaseInterface {\n  public defaultConfig: TokenConfig = {\n    prefix: 'oauth_',\n    name: 'refresh_token',\n  };\n\n  constructor(protected storage: StorageInterface, config?: TokenConfig) {\n    super(storage);\n\n    this.setConfig(this.defaultConfig, config);\n  }\n}\n","import Base from './base';\nimport {\n  BaseInterface, StorageInterface,\n  TokenConfig,\n} from './interfaces';\n\nexport default class State extends Base implements BaseInterface {\n  public defaultConfig: TokenConfig = {\n    prefix: 'oauth_',\n    name: 'state',\n  };\n\n  constructor(protected storage: StorageInterface, config?: TokenConfig) {\n    super(storage);\n\n    this.setConfig(this.defaultConfig, config);\n  }\n}\n","import * as LocalForage from 'localforage';\n\nimport {\n  CookieGetOptions,\n  CookieSetOptions,\n  Data,\n  StorageInterface,\n} from '../interfaces';\n\nexport default class StorageLocalForage implements StorageInterface {\n  // eslint-disable-next-line no-empty-function\n  constructor(private instance: LocalForage) {\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public set(name: string, value: Data, _options?: CookieSetOptions): void {\n    this.instance.setItem(name, value);\n  }\n\n  // @ts-ignore\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n  public async get(name: string, _options?: CookieGetOptions): Promise<string> {\n    // eslint-disable-next-line no-return-await\n    return await this.instance.getItem<string | null>(name);\n  }\n\n  public async remove(name: string): Promise<void> {\n    await this.instance.removeItem(name);\n  }\n}\n","import jwt_decode from 'jwt-decode';\n\nimport Base from './base';\nimport {\n  BaseInterface,\n  CookieGetOptions,\n  CookieSetOptions,\n  ParseTokenInterface,\n  StorageInterface, TokenConfig,\n} from './interfaces';\n\nexport default class Token extends Base implements BaseInterface {\n  public defaultConfig: TokenConfig = {\n    prefix: 'oauth_',\n    name: 'token',\n  };\n\n  private parsed: ParseTokenInterface;\n\n  constructor(protected storage: StorageInterface, config?: TokenConfig) {\n    super(storage);\n\n    this.setConfig(this.defaultConfig, config);\n  }\n\n  public set(token: string, options?: CookieSetOptions): void {\n    this.storage.set(this.getName(), token, options);\n    this.parseToken(token);\n  }\n\n  private parseToken(token: string): void {\n    this.parsed = jwt_decode(token);\n  }\n\n  public getParsed(): any {\n    return this.parsed;\n  }\n\n  public isLoaded(): boolean {\n    return !!this.parsed;\n  }\n\n  public isExpired(): boolean {\n    if (!this.parsed) {\n      return false;\n    }\n\n    const date = new Date();\n    return date.getTime() <= this.parsed.exp;\n  }\n\n  public guard(scope?: string | string[]): boolean {\n    if (!this.parsed) {\n      return false;\n    }\n\n    if (typeof scope === 'undefined') {\n      return true;\n    }\n\n    const scopes = Array.isArray(scope) ? scope : [scope];\n    const filtered = scopes.filter((item: string) => !this.parsed.scopes.includes(item));\n    return filtered.length <= 0;\n  }\n\n  public async loadToken(options?: CookieGetOptions): Promise<boolean> {\n    const token = await this.get(options);\n\n    if (!token) {\n      return false;\n    }\n\n    this.parseToken(token);\n\n    if (this.isExpired()) {\n      this.remove();\n      return false;\n    }\n\n    return true;\n  }\n}\n"],"names":["Base","constructor","storage","this","prefix","get","options","getName","remove","set","value","setConfig","defaultConfig","config","name","super","challenge","state","getConfig","key","authorize","scope","window","Error","getChallenge","uuidv4","replaceAll","client_id","authenticateUri","params","redirect_uri","getRedirectUri","response_type","code_challenge","code_challenge_method","searchParams","URLSearchParams","location","href","toString","md","forge","sha256","create","update","hash","util","encode64","digest","data","replace","getRequestTokenData","code","localState","tokenUri","uri","code_verifier","grant_type","getRefreshTokenData","token","refresh_token","redirectUri","protocol","hostname","port","rUri","instance","path","Promise","resolve","_options","setItem","getItem","removeItem","parseToken","parsed","jwt_decode","getParsed","isLoaded","isExpired","Date","getTime","exp","guard","Array","isArray","filter","item","scopes","includes","length","loadToken"],"mappings":"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"}